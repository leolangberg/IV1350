package se.kth.IV1350.progExe.controller;

import se.kth.IV1350.progExe.integration.*;
import se.kth.IV1350.progExe.integration.external.*;
import se.kth.IV1350.progExe.model.*;
import se.kth.IV1350.progExe.model.DTO.*;
import se.kth.IV1350.progExe.model.ENUM.*;

/**
 * The Controller class is responsible for handling all communication between the view and the model.
 * 
 * This class contains methods for initiating a new sale, fetching items, ending a sale, processing payments, and applying discounts.
 */
public class Controller {

    private SalesHandler salesHandler;
    private Display display;
    private cashRegister cashRegister;

    private ExternalAccountingSys externalAccountingSys;
    private ExternalInventorySys externalInventorySys;
    private ExternalDiscountSys externalDiscountSys;

    private StringHandler stringHandler;

    /**
     * Constructs a new Controller object.
     * 
     * This constructor initializes the Controller with the provided external systems, display, and cash register.
     *
     * @param externalAccountingSys The external accounting system to be used by the Controller.
     * @param externalInventorySys The external inventory system to be used by the Controller.
     * @param externalDiscountSys The external discount system to be used by the Controller.
     * @param display The display to be used by the Controller.
     * @param cashRegister The cash register to be used by the Controller.
     */
    public Controller(ExternalAccountingSys externalAccountingSys,
            ExternalInventorySys externalInventorySys, ExternalDiscountSys externalDiscountSys,
            Display display, cashRegister cashRegister) {

        this.externalAccountingSys = externalAccountingSys;
        this.externalDiscountSys = externalDiscountSys;
        this.externalInventorySys = externalInventorySys;

        this.display = display;
        this.cashRegister = cashRegister;
        this.stringHandler = new StringHandler();

    };


    /**
     * Initiates a new sale.
     * 
     * This method creates a new SalesHandler object with a unique ID generated by the external accounting system.
     */
    public void newSale() {
        salesHandler = new SalesHandler(externalAccountingSys.newID());
    }


    /**
     * Fetches an item based on the provided item ID.
     *
     * @param item_id The ID of the item to fetch.
     * @return A String indicating whether the item was successfully retrieved and added to the sale.
     */
    public String getItem(int item_id) {
        return getItem(item_id, 1);
    }

    /**
     * Fetches a specified quantity of an item based on the provided item ID.
     * 
     * @param item_id The ID of the item to fetch.
     * @param quantity The quantity of the item to fetch.
     * @return A String indicating whether the item was successfully retrieved and added to the sale.
     */
    public String getItem(int item_id, int quantity) {

        ItemDTO itemDTO = externalInventorySys.getItem(item_id, quantity);
        if (itemDTO == null) {
            return "ItemID: " + item_id + " is Invalid.";
        }

        salesHandler.addItem(itemDTO, quantity);
        String itemInfo = stringHandler.itemInfo(itemDTO, quantity);
        String saleInfo = stringHandler.saleInfo(salesHandler.getSaleDTO());

        return itemInfo + saleInfo;
    }

    /**
     * Tells salesHandler to end Sale.
     * The returned saleDTO is sent to check for discounts.
     * A new updated saleDTO is then sent to display.
     */
    public String endSale() {

        SaleDTO saleDTO = salesHandler.endSale();
        DiscountDTO discountDTO = externalDiscountSys.getDiscount(saleDTO.getSaleItemList());
        salesHandler.applyDiscount(discountDTO); // updates saleDTO

        return stringHandler.EndSaleInfo(salesHandler.getSaleDTO());

    }

    /**
     * Processes the payment for the current sale.
     *
     * @param enumType The type of payment.
     * @param amountPaid The amount paid by the customer.
     * @return String indicating whether the payment was successful.
     */
    public String Payment(PaymentType enumType, double amountPaid) {

        SaleDTO saleDTO = salesHandler.getSaleDTO();
        PaymentDTO paymentDTO = new PaymentDTO(amountPaid, enumType, saleDTO);
        boolean paymentSuccess = salesHandler.transaction(paymentDTO);

        if (paymentSuccess) { 

            ReceiptDTO receiptDTO = salesHandler.getReceiptDTO();
            display.printReceipt(receiptDTO);
            cashRegister.updateCashRegister(amountPaid, paymentDTO.getPaymentChange());
            externalAccountingSys.logReceipt(receiptDTO);
            externalInventorySys.updateItemQuantity(saleDTO.getSaleItemList());

            return stringHandler.paymentSuccess(paymentDTO);

        } else {

            return stringHandler.paymentFailure(paymentDTO);
        }
    }

    /**
     * Retrieves and applies a discount based on the provided discount ID.
     *
     * @param discount_id The ID of the discount to retrieve and apply.
     * @return indicating whether the discount was successfully retrieved and applied.
     */
    public boolean getDiscountFromID(int discount_id) {

        DiscountDTO discountDTO = externalDiscountSys.getDiscount(discount_id);
        boolean discountExists = salesHandler.applyDiscount(discountDTO);

        if (discountExists) {
            stringHandler.saleInfo(salesHandler.getSaleDTO()); // print updated price after discount

            return true;
        } else {
            // discount does not exists.
            return false;
        }
    }
}
